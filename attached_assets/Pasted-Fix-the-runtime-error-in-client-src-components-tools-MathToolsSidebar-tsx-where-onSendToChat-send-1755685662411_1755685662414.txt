Fix the runtime error in /client/src/components/tools/MathToolsSidebar.tsx
where onSendToChat={sendToChat} is used but sendToChat is not defined.

Implement the following minimal changes:

A) MathToolsSidebar.tsx
- After imports, add a tiny event-bus helper using useCallback.
- Use it to create sendToChat inside the component and pass it down.

Code to add:

// MathToolsSidebar.tsx
import { useCallback } from "react";

type ChatBridgePayload =
  | { kind: "graph"; expression: string; range: [number, number] }
  | { kind: "text"; text: string };

function useSendToChat() {
  return useCallback((payload: ChatBridgePayload) => {
    window.dispatchEvent(new CustomEvent("app:sendToChat", { detail: payload }));
  }, []);
}

export default function MathToolsSidebar(/* existing props */) {
  const sendToChat = useSendToChat();   // ← define it here

  return (
    <TabsContent value="graphs" className="p-4 m-0">
      <GraphTool
        onSendToChat={sendToChat}        // ← now defined
        initialFunction={graphFunctions}
        initialRange={graphRange}
      />
    </TabsContent>
  );
}

B) GraphTool.tsx
- Ensure the component accepts and uses the prop safely.

type GraphToolProps = {
  onSendToChat?: (payload:
    | { kind: "graph"; expression: string; range: [number, number] }
    | { kind: "text"; text: string }
  ) => void;
  initialFunction?: string;
  initialRange?: [number, number];
};

export function GraphTool({ onSendToChat, initialFunction, initialRange }: GraphToolProps) {
  // when user clicks "Send to Tutor"
  const handleSend = () => {
    const expr = currentExpression || initialFunction || "sin(x)";
    const range: [number, number] = currentRange || initialRange || [-Math.PI * 2, Math.PI * 2];
    onSendToChat?.({ kind: "graph", expression: expr, range }); // safe optional call
  };

  // make sure the button calls handleSend
  // <Button onClick={handleSend}>Send to Tutor</Button>
}

C) Chat component (where messages are sent to /api/tutor/message)
- Add one listener to receive events and forward a concise message to the tutor.
- Search for the main chat component file (e.g., /client/src/pages/tutor/TutorChat.tsx,
  ChatPanel.tsx, or components/chat/Chat.tsx) and add this useEffect.

import { useEffect } from "react";

export default function TutorChat() {
  // You already have sendMessage(text: string) implemented

  useEffect(() => {
    const handler = (e: Event) => {
      const { detail } = e as CustomEvent<any>;
      if (!detail) return;

      if (detail.kind === "graph") {
        const { expression, range } = detail as { expression: string; range: [number, number] };
        // optionally also open the Graphs tab here if available
        // openGraphsPanel(expression, range);
        const msg = `Explain the graph of y = ${expression} on [${range[0]}, ${range[1]}] in IB style.`;
        sendMessage(msg);
      } else if (detail.kind === "text") {
        sendMessage(detail.text);
      }
    };

    window.addEventListener("app:sendToChat", handler as EventListener);
    return () => window.removeEventListener("app:sendToChat", handler as EventListener);
  }, [sendMessage]);

  // ...rest of component
}

D) Build & test
- Reload the app. The runtime overlay should be gone.
- Go to Graphs panel → click "Send to Tutor": a message should appear in chat.
- Ask in chat: "Plot y = sin(x) from –2π to 2π". If intent detection is implemented,
  it should render a graph; otherwise use the Graphs panel to draw and press "Send to Tutor".
