Wire up Wolfram plotting properly.

1) Backend route file:
- Open server/wolfram.ts and replace its contents with:

import { Router } from "express";
import fetch from "node-fetch";

const router = Router();

/** GET /api/wolfram/selftest?query=...  -> returns { imageBase64: "data:image/png;base64,..." } */
router.get("/selftest", async (req, res) => {
  try {
    const APPID = process.env.WOLFRAM_APP_ID;
    if (!APPID) return res.status(500).json({ error: "WOLFRAM_APP_ID is missing" });

    const q = (req.query.query as string) || "plot y = sin(x) from -2pi to 2pi";
    const url =
      "https://api.wolframalpha.com/v1/simple" +
      `?appid=${encodeURIComponent(APPID)}` +
      `&i=${encodeURIComponent(q)}` +
      `&background=ffffff&foreground=000000&width=900`;

    const r = await fetch(url);
    if (!r.ok) {
      const txt = await r.text();
      return res.status(502).json({ error: `Wolfram error ${r.status}`, detail: txt });
    }
    const buf = await r.arrayBuffer();
    const b64 = Buffer.from(buf).toString("base64");
    res.json({ imageBase64: `data:image/png;base64,${b64}` });
  } catch (err: any) {
    res.status(500).json({ error: err?.message || "Server error" });
  }
});

/** POST /api/wolfram/simple  {query} -> { imageBase64 } */
router.post("/simple", async (req, res) => {
  try {
    const APPID = process.env.WOLFRAM_APP_ID;
    if (!APPID) return res.status(500).json({ error: "WOLFRAM_APP_ID is missing" });

    const q = (req.body?.query as string) || "";
    if (!q.trim()) return res.status(400).json({ error: "Missing 'query' body" });

    const url =
      "https://api.wolframalpha.com/v1/simple" +
      `?appid=${encodeURIComponent(APPID)}` +
      `&i=${encodeURIComponent(q)}` +
      `&background=ffffff&foreground=000000&width=900`;

    const r = await fetch(url);
    if (!r.ok) {
      const txt = await r.text();
      return res.status(502).json({ error: `Wolfram error ${r.status}`, detail: txt });
    }
    const buf = await r.arrayBuffer();
    const b64 = Buffer.from(buf).toString("base64");
    res.json({ imageBase64: `data:image/png;base64,${b64}` });
  } catch (err: any) {
    res.status(500).json({ error: err?.message || "Server error" });
  }
});

export default router;

2) Central router:
- Open server/routes.ts and mount this router:
   import wolframRouter from "./wolfram";
   export function registerRoutes(app: import("express").Express) {
     // keep existing mounts
     app.use("/api/wolfram", wolframRouter);
   }

3) Clean index.ts:
- Remove any inline “app.get('/api/wolfram/selftest' …)” you added earlier in server/index.ts. We’ll use routes.ts for routing.
- Ensure index.ts still does: import { registerRoutes } from "./routes"; registerRoutes(app);

4) Dependencies:
- Install typesafe fetch for Node: npm i node-fetch@2 @types/node-fetch@2

5) Secrets:
- Confirm the secret key is exactly WOLFRAM_APP_ID (it is set already) and then restart the app.
