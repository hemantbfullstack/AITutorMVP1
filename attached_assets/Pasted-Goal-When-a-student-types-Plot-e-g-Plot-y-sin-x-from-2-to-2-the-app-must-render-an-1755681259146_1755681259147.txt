Goal: When a student types “Plot …” (e.g., “Plot y = sin(x) from –2π to 2π”), the app must render an interactive graph in the UI, not just text. Implement:

A) Frontend – Graphs tab + Chat auto-render
1) Install math.js and plotly.js on client if missing.
2) Create a Graphs panel component (if not already): GraphsPanel.tsx
   - Inputs: function(s) text, x-min, x-max.
   - Defaults: x in [-10, 10].
   - Render with Plotly in a responsive div.
   - Support multiple comma-separated functions (e.g., "sin(x), cos(x)").

3) Add a parser util: parseGraphQuery.ts
   - Parse strings like:
     - "plot y = sin(x) from -2π to 2π"
     - "plot y= x^2 - 3x + 2"
     - "graph sin(x) on [-6.28, 6.28]"
   - Handle unicode minus (–) and ASCII (-).
   - Replace π with Math.PI.
   - Extract function expression(s) and optional range.
   - Return: { functions: string[], xmin: number, xmax: number }

4) Function evaluation:
   - Use math.js to compile each expression (e.g., "sin(x)+cos(2*x)").
   - Sample 1000 points between xmin..xmax, build traces for Plotly.

5) Chat hook:
   - Before sending a user message, run light intent detection:
     * If it matches /^ *(plot|graph)\b/i or includes "y =" + a math expression:
       - Parse with parseGraphQuery.
       - Open Math Tools → Graphs tab and render immediately.
   - Still send the message to the tutor for explanation, but do NOT output “cannot draw” text.

6) Tutor integration (metadata, optional):
   - If server returns a metadata object like { uiAction: { type: "graph", func: "...", range: [...] } }, honor it and render.

7) UI niceties:
   - Under the tutor answer (if a graph was rendered), show a pill: “Rendered graph: y = …   [Open Graphs]”.
   - Add “Send to Tutor” button in Graphs tab that posts the current function(s) into chat as context.

B) Backend – Wolfram image (optional)
1) Ensure POST /api/tools/wolfram exists:
   - Input: { query: string }
   - Return: { plaintext?: string, images?: string[] } (image URLs or base64)
   - If WOLFRAM_APP_ID is missing, return 501 so client can hide “Wolfram image” button.

2) Client Wolfram button:
   - In Graphs panel add “Get Wolfram Plot Image”:
     * Builds a Wolfram query like "plot y = <expr>, x from <xmin> to <xmax>"
     * Calls /api/tools/wolfram
     * If an image is returned, show it below Plotly chart.

C) System prompt polish (server)
- Update tutor system prompt:
  “If the student requests a plot/graph, provide a concise explanation and trigger the client to render the graph. Avoid phrasing like ‘I cannot create graphs.’ Keep answers brief when a visual is shown.”

D) Tests (automate/manual)
- “Plot y = sin(x) from –2π to 2π” → immediate Plotly graph + short tutor note.
- “Graph y = x^2 - 3x + 2” → parabola appears; tutor explains vertex/roots.
- “Plot sin(x), cos(x) on [-π, π]” → two traces with legend.
- With WOLFRAM_APP_ID: click “Get Wolfram Plot Image” → image renders.
- Turn off key → button hides gracefully.

E) Edge cases
- If parse fails, show a toast “Couldn’t parse graph request—try ‘plot y = … from a to b’”.
- Clamp absurd ranges to a sane default (e.g., >1e6 → fallback to [-10, 10]).
- Support both “pi” and “π”; replace with Math.PI.
