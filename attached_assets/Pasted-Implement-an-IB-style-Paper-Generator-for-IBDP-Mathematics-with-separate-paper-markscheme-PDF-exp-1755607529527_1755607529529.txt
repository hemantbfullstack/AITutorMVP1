Implement an IB-style Paper Generator for IBDP Mathematics with separate paper + markscheme, PDF export, and freemium gating.

Backend (/server, Express + TS):
1) Env:
   - OPENAI_API_KEY (reuse)
   - WOLFRAM_APP_ID (optional check answers)
2) DB (Prisma):
   model PaperTemplate { id String @id @default(cuid()) name String? metaJson Json? createdAt DateTime @default(now()) }
   model GeneratedPaper {
     id String @id @default(cuid())
     userId String
     subject String   // "AA" | "AI"
     level   String   // "HL" | "SL"
     paperType String // "P1" | "P2"
     topics   String[] // selected syllabus topics
     questionsJson Json // [{qId, prompt, marks, calcAllowed, commandTerm, topicTag}]
     markschemeJson Json // [{qId, steps:[{text, marks}], totalMarks}]
     totalMarks Int
     pdfUrl String?
     msPdfUrl String?
     createdAt DateTime @default(now())
     User User @relation(fields: [userId], references: [id])
   }
   // Also allow uploading reference docs (optional now; full pipeline later)
   model ResourceDoc { id String @id @default(cuid()) name String url String createdAt DateTime @default(now()) }

   Run migration.

3) Routes:
   - POST /api/papers/generate  (requireAuth)
     Body: {
       subject: "AA"|"AI",
       level: "HL"|"SL",
       paperType: "P1"|"P2",
       numQuestions: number, // 3–15
       topics?: string[],    // optional topic tags
       calcAllowed?: boolean // inferred from paperType (P1=false, P2=true)
     }
     Behavior:
       * Enforce freemium: if user plan is FREE → return 402 {error:"Premium required"}.
       * Build a strict system prompt to generate NEW IB-style questions (not copied), using command terms, marks, and difficulty aligned to HL/SL. Include calculator rule (P1 no calc, P2 calc allowed).
       * Ask model to return a well-structured JSON for questions and an aligned markscheme JSON (with method vs accuracy style: M, A notes).
       * (Optional) For numeric answers, verify with Wolfram when possible; if mismatch, request model to self-correct.
       * Save GeneratedPaper in DB (questionsJson + markschemeJson).
       * Return { paperId }.

   - GET /api/papers/:paperId  (requireAuth) → returns the stored JSON.
   - POST /api/papers/:paperId/pdf  (requireAuth)
     * Render Paper and Markscheme to PDFs (use pdfkit/pdfmake in server) with IB-like layout (header, section titles, marks in [ ] at line end).
     * Store files under /storage or temp; return { paperPdfUrl, markschemePdfUrl }.

   - (Optional admin) POST /api/resources/upload (multipart) → store ResourceDoc (for future context).

4) IB authoring prompt (server constant):
   - Include command terms list (Solve, Show that, Hence, Verify, Explain, Determine, Find, Sketch, Prove).
   - Difficulty policy:
     * SL: shorter chains, straightforward methods, 6–10 marks per long Q.
     * HL: multi-step reasoning, possible proofs, 8–14 marks per long Q.
   - Paper rules:
     * Paper 1: non‑calculator; avoid numeric-only brute force; emphasize algebraic/analytic methods.
     * Paper 2: calculator allowed; include contexts where numeric methods/graphs may be useful.
   - Topic balance: if topics[] provided, ensure coverage; else mix across Core (Functions, Algebra, Calculus, Probability/Stats, Geometry/Trig, Vectors for HL).
   - Output schema:
     {
       "questions":[
         {"qId":"Q1","topic":"Calculus","commandTerm":"Show that","marks":8,"calcAllowed":false,
          "prompt":"...", "data":"(LaTeX allowed)", "answerType":"worked"},
         ...
       ],
       "markscheme":[
         {"qId":"Q1","totalMarks":8,
          "steps":[{"label":"M1","text":"...","marks":1},{"label":"A1","text":"...","marks":1}, ...]}
       ],
       "notes":"any constraints or assumptions"
     }

Frontend (/client, React + Tailwind):
1) UI entry:
   - New page /papers with two tabs: "Generate New" | "My Papers"
   - "Generate New" form fields:
     * Subject: AA | AI
     * Level: HL | SL
     * Paper: Paper 1 (No calculator) | Paper 2 (Calculator)
     * Topics (multi-select chips) – Algebra, Functions, Calculus, Probability & Statistics, Geometry/Trig, Vectors (HL)
     * Number of questions (3–15)
     * Button: Generate Paper

2) After submit:
   - Call POST /api/papers/generate; on 402 → show paywall modal (premium required).
   - Show a loader, then "Paper Preview":
     * IB-style header (subject/level/paper, time placeholder)
     * Each question numbered with [marks] at end
     * Toggle “Show Markscheme” (hidden by default)
     * Buttons:
       - Download Paper (PDF)
       - Download Markscheme (PDF)
       - Start Timer (60/90/120 minutes selector)
       - Practice Mode (hide answers; reveal hints on click)
       - Send Q to Tutor (opens question in chat for step-by-step guidance)

3) My Papers tab:
   - List of previously generated papers (date, subject, level, paper type, total marks).
   - Buttons: Preview | Paper PDF | Markscheme PDF | Practice Again.

4) Styling & UX:
   - Clean IB feel: wide margins, serif headings for paper, monospaced for math where needed.
   - Use KaTeX/MathJax to render LaTeX in preview.

5) Validation & errors:
   - If model returns invalid JSON, auto‑retry once, else show friendly error.
   - If PDF generation fails, still keep preview available.

Docs:
1) README "IB Paper Generator":
   - How to set options (AA/AI, HL/SL, P1/P2).
   - How marks and command terms are assigned.
   - Freemium rule: Paper Generator is premium-only.
   - Future: add resource uploads + embeddings to align style even more.
