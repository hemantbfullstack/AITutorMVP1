Make plotting work end‑to‑end with Wolfram Simple API and show the image inline in chat.

A) Backend (Express)
1) Install node-fetch v2 if missing (used by server): npm i node-fetch@2
2) Create file server/src/routes/wolfram.ts with:
   - POST /api/wolfram/simple  { query: string }
   - Uses process.env.WOLFRAM_APP_ID
   - Calls https://api.wolframalpha.com/v1/simple?appid=APPID&i=<query>&background=ffffff&foreground=000000&width=900
   - Reads response as arrayBuffer → base64 → returns { imageBase64: "data:image/png;base64,..." }
   - Add GET /api/wolfram/selftest?query=... that returns the same JSON (handy to test from a browser).
3) In server/src/index.ts register the router:
   import wolframRouter from "./routes/wolfram";
   app.use("/api/wolfram", wolframRouter);

B) Frontend – small client helper
1) Create client/src/utils/wolframClient.ts:
   export async function fetchWolframImage(query: string): Promise<string> {
     const r = await fetch("/api/wolfram/simple", {
       method: "POST",
       headers: { "Content-Type": "application/json" },
       body: JSON.stringify({ query }),
     });
     const j = await r.json();
     if (!r.ok) throw new Error(j.error || "Wolfram failed");
     return j.imageBase64;
   }

C) Frontend – Chat: detect “plot/graph …” and render the image bubble
1) In the main chat component (where sendMessage is called), add:
   function parsePlotQuery(text: string) {
     const t = text.replace(/–/g, "-").replace(/π/gi, "pi").trim();
     const m = t.match(/^(?:plot|graph)\s+(.+)/i);
     return m ? `plot ${m[1]}` : null; // e.g. "plot y = sin(x) from -2pi to 2pi"
   }
2) Import the helper:
   import { fetchWolframImage } from "@/utils/wolframClient";
3) Extend message type so assistant messages may include an image:
   // wherever ChatMessage is defined
   // add: image?: string   // data URL
4) In the handler that sends messages:
   async function handleSend(raw: string) {
     const text = raw.trim();
     if (!text) return;

     const plotQuery = parsePlotQuery(text);
     if (plotQuery) {
       try {
         const img = await fetchWolframImage(plotQuery);
         addMessage({
           id: crypto.randomUUID(),
           role: "assistant",
           content: `Rendered graph: ${plotQuery.replace(/^plot\s+/i, "")}`,
           image: img,   // <-- show image inline
         });
       } catch (e:any) {
         addMessage({
           id: crypto.randomUUID(),
           role: "assistant",
           content: `Couldn't render with Wolfram: ${e?.message || "unknown error"}`,
         });
       }
     }

     await sendMessage(text); // still ask tutor to explain briefly
   }
5) In the message renderer, if msg.image exists, render it:
   {msg.image ? (
     <div className="space-y-2">
       <p>{msg.content}</p>
       <img src={msg.image} alt="Graph" style={{maxWidth:"100%",borderRadius:8,border:"1px solid #e5e7eb"}} />
     </div>
   ) : (<p>{msg.content}</p>)}

D) Config & test
1) Ensure the secret exists in Replit: key = WOLFRAM_APP_ID, value = your AppID.
2) Restart the app.
3) Quick backend test (no chat): open in browser
   /api/wolfram/selftest?query=plot%20y%20%3D%20sin(x)%20from%20-2pi%20to%202pi
   You should see { imageBase64: "data:image/png;base64,..." }.
4) Chat test:
   Type: Plot y = sin(x) from –2π to 2π
   Expected: a chat bubble saying "Rendered graph: sin(x) from -2pi to 2pi" with the actual image.
